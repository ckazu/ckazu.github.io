<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ckazu.info</title>
  <subtitle>What is an Information Architecture?</subtitle>
  <id>http://ckazu.info/blog</id>
  <link href="http://ckazu.info/blog"/>
  <link href="http://ckazu.info/blog/feed.xml" rel="self"/>
  <updated>2013-12-18T13:14:00Z</updated>
  <author>
    <name>ckazu</name>
  </author>
  <entry>
    <title>Sinatra で streaming を使用した際にちゃんとコネクションを閉じる</title>
    <link rel="alternate" href="http://ckazu.info/blog/2013/12/18/sinatra_streaming/"/>
    <id>http://ckazu.info/blog/2013/12/18/sinatra_streaming/</id>
    <published>2013-12-18T13:14:00Z</published>
    <updated>2013-12-18T13:50:15+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;h2&gt;Sinatra で Streaming&lt;/h2&gt;

&lt;p&gt;Sinatra で WebSocket のような stream の簡便な実装を書くことができます．&lt;/p&gt;

&lt;p&gt;簡易なチャットシステムや，流れてくるログ拾ってきてブラウザで眺めるなどの用途に使えそうです．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;provides: &lt;/span&gt;&lt;span class="s1"&gt;'text/event-stream'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ss"&gt;:keep_open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'なにがしかの処理'&lt;/span&gt;
      &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h2&gt;Sinatra で Streaming&lt;/h2&gt;

&lt;p&gt;Sinatra で WebSocket のような stream の簡便な実装を書くことができます．&lt;/p&gt;

&lt;p&gt;簡易なチャットシステムや，流れてくるログ拾ってきてブラウザで眺めるなどの用途に使えそうです．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;provides: &lt;/span&gt;&lt;span class="s1"&gt;'text/event-stream'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ss"&gt;:keep_open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'なにがしかの処理'&lt;/span&gt;
      &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;loop したい&lt;/h2&gt;

&lt;p&gt;たとえば，ログを眺めるような用途だと，ログを監視して差分を送ってあげるなどの処理が必要になるでしょう．&lt;/p&gt;

&lt;p&gt;loop ブロックを使用したくなることがありそうです．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ss"&gt;:keep_open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'データの差分を送る'&lt;/span&gt;
        &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;connection が増幅する&lt;/h2&gt;

&lt;p&gt;しかし，この実装だと，ブラウザをリロードしてみると以前のコネクションが残ってしまいます．&lt;/p&gt;

&lt;p&gt;次のようにしてサーバログを見ると，リロードした数だけ余分に呼ばれていることがわかります．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ss"&gt;:keep_open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s1"&gt;'loop'&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'データの差分を送る'&lt;/span&gt;
        &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;callback&lt;/h2&gt;

&lt;p&gt;connection が切れたことを検知するには，callback を利用するのが良さそうです．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ss"&gt;:keep_open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'データの差分を送る'&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="nf"&gt;.errback&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="s1"&gt;'closed'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;コネクションの管理&lt;/h2&gt;

&lt;p&gt;ただし，callback の Proc 内では loop ブロックを break できないので，次のようにしてコネクションを管理することにします．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;provides: &lt;/span&gt;&lt;span class="s1"&gt;'text/event-stream'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="ss"&gt;:keep_open&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;conns&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;'データの差分を送る'&lt;/span&gt;

        &lt;span class="c1"&gt;# if connection closed&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="nf"&gt;.callback&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;conns&lt;/span&gt;&lt;span class="nf"&gt;.delete&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="nf"&gt;.errback&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;conns&lt;/span&gt;&lt;span class="nf"&gt;.delete&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;conns&lt;/span&gt;&lt;span class="nf"&gt;.include?&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;

        &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>rails の delegate で，移譲先のオブジェクトが nil になる場合の対応</title>
    <link rel="alternate" href="http://ckazu.info/blog/2013/12/14/delegate_allow_nil/"/>
    <id>http://ckazu.info/blog/2013/12/14/delegate_allow_nil/</id>
    <published>2013-12-13T15:00:00Z</published>
    <updated>2013-12-18T13:50:15+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;h2&gt;delegate&lt;/h2&gt;

&lt;p&gt;互いに関連を持つ&lt;code&gt;User&lt;/code&gt;, &lt;code&gt;Profile&lt;/code&gt; があるとして，ある&lt;code&gt;User&lt;/code&gt;を主体として&lt;code&gt;Profile#job&lt;/code&gt;を得るには&lt;code&gt;user.profile.job&lt;/code&gt;とする必要があります．&lt;/p&gt;

&lt;p&gt;ですが，単に&lt;code&gt;user.job&lt;/code&gt;とアクセスしたいと思うこともあるでしょう．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:profile&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;job&lt;/span&gt;
    &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="nf"&gt;.try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ということで，&lt;code&gt;User#job&lt;/code&gt;メソ...&lt;/p&gt;</summary>
    <content type="html">&lt;h2&gt;delegate&lt;/h2&gt;

&lt;p&gt;互いに関連を持つ&lt;code&gt;User&lt;/code&gt;, &lt;code&gt;Profile&lt;/code&gt; があるとして，ある&lt;code&gt;User&lt;/code&gt;を主体として&lt;code&gt;Profile#job&lt;/code&gt;を得るには&lt;code&gt;user.profile.job&lt;/code&gt;とする必要があります．&lt;/p&gt;

&lt;p&gt;ですが，単に&lt;code&gt;user.job&lt;/code&gt;とアクセスしたいと思うこともあるでしょう．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:profile&lt;/span&gt;

  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;job&lt;/span&gt;
    &lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="nf"&gt;.try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ということで，&lt;code&gt;User#job&lt;/code&gt;メソッドを定義しました．&lt;/p&gt;

&lt;p&gt;しかし，この場合は，次のように移譲を用いることで解決することができます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:profile&lt;/span&gt;
  &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="ss"&gt;:job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: :profile&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;移譲先が nil のケース&lt;/h2&gt;

&lt;p&gt;ただ，&lt;code&gt;user.profile&lt;/code&gt;が存在しない場合(&lt;code&gt;user.profile==nil&lt;/code&gt;の場合)，&lt;code&gt;NoMethodError&lt;/code&gt;になりますね．&lt;/p&gt;

&lt;p&gt;移譲先のオブジェクトにアクセス可能であることが保証できない場合，&lt;code&gt;allow_nil&lt;/code&gt;オプションを指定することでこれを解決できます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:profile&lt;/span&gt;
  &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="ss"&gt;:job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: :profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;allow_nil: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>ActiveRecord の serialize を使う</title>
    <link rel="alternate" href="http://ckazu.info/blog/2013/12/11/activerecord_serialize/"/>
    <id>http://ckazu.info/blog/2013/12/11/activerecord_serialize/</id>
    <published>2013-12-11T14:06:00Z</published>
    <updated>2013-12-18T13:50:15+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;h2&gt;ActiveRecord::Base .serialize&lt;/h2&gt;

&lt;p&gt;rails でオブジェクトをそのまま DB に保存したい場合， serialize が使える場合があります．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:group_ids&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このようにすると，&lt;code&gt;User#group_ids&lt;/code&gt; オブジェクトは serialize されて保存されますが，扱う際にはそれを意識する必要がありません．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'alice...&lt;/span&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h2&gt;ActiveRecord::Base .serialize&lt;/h2&gt;

&lt;p&gt;rails でオブジェクトをそのまま DB に保存したい場合， serialize が使える場合があります．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:group_ids&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;このようにすると，&lt;code&gt;User#group_ids&lt;/code&gt; オブジェクトは serialize されて保存されますが，扱う際にはそれを意識する必要がありません．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'alice'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;group_ids: &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.save&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;DB には，YAML 形式で保存されています．&lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;gt; select * from users;
1|alice|---\n- 1\n- 3\n- 5|2013-12-11 14:18:07.344781|2013-12-11 14:18:07.344781
&lt;/pre&gt;
&lt;p&gt;rails では，保存した時のオブジェクトとしてきちんと取り扱われます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;.*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: &amp;quot;alice&amp;quot;, group_ids: [1, 3, 5], created_at: &amp;quot;2013-12-11 14:18:07&amp;quot;, updated_at: &amp;quot;2013-12-11 14:18:07&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.group_ids&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.group_ids.class&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;オブジェクトの種類の制限&lt;/h2&gt;

&lt;p&gt;また，&lt;code&gt;.serialize&lt;/code&gt; の第二引数にオブジェクトのクラスを指定すると，保存するオブジェクトの種類を制限できます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:group_ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'bob'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;group_ids: &lt;/span&gt;&lt;span class="s1"&gt;'1,2,3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transactionActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SerializationTypeMismatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Attribute&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;supposed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;オブジェクトが異なる場合，例外&lt;code&gt;ActiveRecord::SerializationTypeMismatch&lt;/code&gt;を送出します．&lt;/p&gt;

&lt;h2&gt;テスト&lt;/h2&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:group_ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;この場合，&lt;code&gt;Array&lt;/code&gt;を保証する&lt;code&gt;serialize&lt;/code&gt;のテストはどう書くのが良いのでしょうか．&lt;/p&gt;

&lt;p&gt;スタンダードな方法がわからなかったので，愚直に書いてみました．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'.serialize'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'when group_ids given the Array object'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.group_ids&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.group_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.save&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;match_array&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'when group_ids given an invalid object'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'string value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;invalid_object&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.group_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invalid_object&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.save&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;.to&lt;/span&gt; &lt;span class="n"&gt;raise_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SerializationTypeMismatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;shoulda-matchers&lt;/code&gt;のように宣言的に書けるものはあるのでしょうか．&lt;/p&gt;

&lt;h3&gt;はまった点&lt;/h3&gt;

&lt;p&gt;オブジェクトが異なる場合に，例外&lt;code&gt;ActiveRecord::SerializationTypeMismatch&lt;/code&gt;が送出されるのは，保存の時ですね．&lt;/p&gt;

&lt;p&gt;なので，たとえば，&lt;code&gt;Array&lt;/code&gt;を期待しているカラムに対して&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="nf"&gt;.group_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'invalid value'&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;invalid value&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 2, name: &amp;quot;bob&amp;quot;, group_ids: &amp;quot;invalid value&amp;quot;, created_at: &amp;quot;2013-12-11 14:25:27&amp;quot;, updated_at: &amp;quot;2013-12-11 14:25:27&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;などとしても，この時点では何の問題も起きません．&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>simple_form で binary 型フィールドの file_field を使う</title>
    <link rel="alternate" href="http://ckazu.info/blog/2013/12/05/file_field_on_simple_form/"/>
    <id>http://ckazu.info/blog/2013/12/05/file_field_on_simple_form/</id>
    <published>2013-12-05T13:35:00Z</published>
    <updated>2013-12-18T13:50:15+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;h2&gt;simple_form&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/plataformatec/simple_form"&gt;https://github.com/plataformatec/simple_form&lt;/a&gt; は，煩雑になりがちなフォームの記述をシンプルにしてくれます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;
    &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;
    &lt;span class="ss"&gt;email:
    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.email_field&lt;/span&gt; &lt;span class="ss"&gt;:mail_address&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;
    &lt;span class="ss"&gt;password:
    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.password_field&lt;/span&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h2&gt;simple_form&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/plataformatec/simple_form"&gt;https://github.com/plataformatec/simple_form&lt;/a&gt; は，煩雑になりがちなフォームの記述をシンプルにしてくれます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;
    &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;
    &lt;span class="ss"&gt;email:
    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.email_field&lt;/span&gt; &lt;span class="ss"&gt;:mail_address&lt;/span&gt;
  &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;
    &lt;span class="ss"&gt;password:
    &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.password_field&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;通常，このように記述するところを，次のように書くことができます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.input&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.input&lt;/span&gt; &lt;span class="ss"&gt;:mail_address&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.input&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;全部，input で済ませることができます．&lt;/p&gt;

&lt;h2&gt;binary 型&lt;/h2&gt;

&lt;p&gt;基本的には DB のカラム定義を見て生成してくれますが，次のように，binary 型のカラムにファイルをアップロードしようとしたところエラーとなってしまいます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.file_field&lt;/span&gt; &lt;span class="ss"&gt;:image_file&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= これを&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.input&lt;/span&gt; &lt;span class="ss"&gt;:image_file&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= このようにするとエラー&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;この場合，&lt;a href="https://github.com/plataformatec/simple_form#available-input-types-and-defaults-for-each-column-type"&gt;https://github.com/plataformatec/simple_form#available-input-types-and-defaults-for-each-column-type&lt;/a&gt; にあるような :as オプションを使用することで回避することができます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.input&lt;/span&gt; &lt;span class="ss"&gt;:image_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as: :file&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>rails でファイルをアップロードする際の挙動</title>
    <link rel="alternate" href="http://ckazu.info/blog/2013/12/04/action_dispatch_http_uploded_file/"/>
    <id>http://ckazu.info/blog/2013/12/04/action_dispatch_http_uploded_file/</id>
    <published>2013-12-04T13:18:00Z</published>
    <updated>2013-12-18T13:50:15+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;h2&gt;経緯&lt;/h2&gt;

&lt;p&gt;&lt;a href="/blog/2013/12/04/image_upload_to_ar_db/"&gt;前回&lt;/a&gt;，画像ファイルをアップロードして DB に保存する記事を書きました．&lt;/p&gt;

&lt;p&gt;実際にファイルはどうやって DB に保存されるのかについて補足します．&lt;/p&gt;

&lt;h2&gt;params をみる&lt;/h2&gt;

&lt;p&gt;前回と同じプロジェクトで進めます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="nf"&gt;.pry&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= ここの params を確認したい&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;h2&gt;経緯&lt;/h2&gt;

&lt;p&gt;&lt;a href="/blog/2013/12/04/image_upload_to_ar_db/"&gt;前回&lt;/a&gt;，画像ファイルをアップロードして DB に保存する記事を書きました．&lt;/p&gt;

&lt;p&gt;実際にファイルはどうやって DB に保存されるのかについて補足します．&lt;/p&gt;

&lt;h2&gt;params をみる&lt;/h2&gt;

&lt;p&gt;前回と同じプロジェクトで進めます．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="nf"&gt;.pry&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= ここの params を確認したい&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon_content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.content_type&lt;/span&gt;
  &lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;実際にファイルをアップロードした時のパラメータを見てみます．&lt;/p&gt;
&lt;pre class="highlight text"&gt;[1] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; params[:user][:icon]
=&amp;gt; #&amp;lt;ActionDispatch::Http::UploadedFile:0x007fbdcbbe0ba0
 @content_type=&amp;quot;image/jpeg&amp;quot;,
 @headers=
  &amp;quot;Content-Disposition: form-data; name=\&amp;quot;user[icon]\&amp;quot;; filename=\&amp;quot;laughing_man.jpg\&amp;quot;\r\nContent-Type: image/jpeg\r\n&amp;quot;,
 @original_filename=&amp;quot;laughing_man.jpg&amp;quot;,
 @tempfile=
  #&amp;lt;File:/var/folders/j6/4l756wsn2538zn3b31sgf3yc0000gn/T/RackMultipart20131204-93143-5kjzat&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;ということで，ブラウザ上のフォームからアップロードしたファイルの正体は &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; のようです．&lt;/p&gt;

&lt;h2&gt;Tempfile&lt;/h2&gt;

&lt;p&gt;この &lt;code&gt;@tempfile&lt;/code&gt; がファイルの実体です．&lt;/p&gt;
&lt;pre class="highlight text"&gt;[2] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; params[:user][:icon].tempfile
=&amp;gt; #&amp;lt;File:/var/folders/j6/4l756wsn2538zn3b31sgf3yc0000gn/T/RackMultipart20131204-93143-5kjzat&amp;gt;
[3] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; params[:user][:icon].tempfile.class
=&amp;gt; Tempfile
[4] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; params[:user][:icon].tempfile.path
=&amp;gt; &amp;quot;/var/folders/j6/4l756wsn2538zn3b31sgf3yc0000gn/T/RackMultipart20131204-93143-5kjzat&amp;quot;
&lt;/pre&gt;
&lt;p&gt;ここからわかるように，アップロードしたファイルは一時的に &lt;code&gt;/var/folders/j6/4l756wsn2538zn3b31sgf3yc0000gn/T/RackMultipart20131204-93143-5kjzat&lt;/code&gt; のような場所に格納されます．&lt;/p&gt;

&lt;p&gt;※ 通常は保存されず，すぐに削除されます．&lt;/p&gt;

&lt;h2&gt;ちなみに，&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; に対して &lt;code&gt;read&lt;/code&gt; メソッドを呼ぶと，バイナリが取得できますが，一度呼ぶと取得できなくなります．&lt;/p&gt;
&lt;pre class="highlight text"&gt;
[5] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; params[:user][:icon].read
=&amp;gt; &amp;quot;\x89PNG\r\n\x1A\n\x00\x00\x00\rIHDR\x00\x00\x00\x92\x00\x00\x00\x92\b\x06\x00\x00\x00\xAE{\x93\x8E\x00\x00\x00\x19tEXtSoftw
...
[6] pry(#&amp;lt;UsersController&amp;gt;)&amp;gt; params[:user][:icon].read
=&amp;gt; &amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;なので，以下のようにプリントデバッグしようとするとはまります(はまりました)．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= ここで読んでしまうと&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= ここでは取得できない&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon_content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.content_type&lt;/span&gt;
  &lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>rails で画像ファイルを DB に保存する</title>
    <link rel="alternate" href="http://ckazu.info/blog/2013/12/04/image_upload_to_ar_db/"/>
    <id>http://ckazu.info/blog/2013/12/04/image_upload_to_ar_db/</id>
    <published>2013-12-03T15:50:00Z</published>
    <updated>2013-12-18T13:50:15+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;h2&gt;rails で画像を保存する&lt;/h2&gt;

&lt;p&gt;rails 画像を扱うには，&lt;a href="https://github.com/thoughtbot/paperclip"&gt;https://github.com/thoughtbot/paperclip&lt;/a&gt; や &lt;a href="https://github.com/carrierwaveuploader/carrierwave"&gt;https://github.com/carrierwaveuploader/carrierwave&lt;/a&gt; といった便利な画像アップローダの gem がありますが，ちょっとしたアイコンやアバター，ロゴ，バナー画像などの類で，加工も必要ないような場合には DB にバイナリで突っ込んでおくくらいが手軽で良さそうです．&lt;/p&gt;

&lt;h3&gt;前提&lt;/h3&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rails new test_app...&lt;/pre&gt;</summary>
    <content type="html">&lt;h2&gt;rails で画像を保存する&lt;/h2&gt;

&lt;p&gt;rails 画像を扱うには，&lt;a href="https://github.com/thoughtbot/paperclip"&gt;https://github.com/thoughtbot/paperclip&lt;/a&gt; や &lt;a href="https://github.com/carrierwaveuploader/carrierwave"&gt;https://github.com/carrierwaveuploader/carrierwave&lt;/a&gt; といった便利な画像アップローダの gem がありますが，ちょっとしたアイコンやアバター，ロゴ，バナー画像などの類で，加工も必要ないような場合には DB にバイナリで突っ込んでおくくらいが手軽で良さそうです．&lt;/p&gt;

&lt;h3&gt;前提&lt;/h3&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rails new test_app
&lt;span class="gp"&gt;$ &lt;/span&gt;vi Gemfile
Gemfile に haml-rails を追加
&lt;span class="gp"&gt;$ &lt;/span&gt;bundle install
&lt;span class="gp"&gt;$ &lt;/span&gt;rails g scaffold user name icon:binary icon_content_type
&lt;span class="gp"&gt;$ &lt;/span&gt;rake db:migrate
&lt;/pre&gt;
&lt;p&gt;以上の作業後の状態です．&lt;/p&gt;

&lt;h3&gt;画像を保存するカラム&lt;/h3&gt;

&lt;p&gt;上で生成しているように，今回は &lt;code&gt;User#icon&lt;/code&gt; に保存することにします．&lt;/p&gt;

&lt;p&gt;また，ファイルタイプを保持しておくために，&lt;code&gt;User#icon_content_type&lt;/code&gt; も同時に用意しておきます．&lt;/p&gt;

&lt;p&gt;それから，デフォルトの状態だと User#icon は blob で保存できるファイルサイズが小さいと思うので，必要に応じて変更します．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.string&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.binary&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nf"&gt;.megabyte&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= limit を指定する&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.string&lt;/span&gt; &lt;span class="ss"&gt;:icon_content_type&lt;/span&gt;

      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.timestamps&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;サンプルは Sqlite3 で作ってしまったので関係ないのですが．．．&lt;/p&gt;

&lt;p&gt;なにはともあれ，migration します．&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rake db:migrate:redo
&lt;/pre&gt;
&lt;h2&gt;コントローラでバイナリをセットする&lt;/h2&gt;

&lt;p&gt;icon のバイナリデータとファイルタイプは create (update も) アクション内でパラメータからセットするようにします．&lt;/p&gt;

&lt;p&gt;rails4 で scaffold を使用すると，&lt;code&gt;user_params&lt;/code&gt; のようなメソッドが生えるので，今回は &lt;code&gt;icon&lt;/code&gt;, &lt;code&gt;icon_content_type&lt;/code&gt; をそこから除外してしまうことにします．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;users_controller&lt;/span&gt;&lt;span class="nf"&gt;.rb&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
&lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="nf"&gt;.new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.read&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= バイナリをセット&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon_content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.content_type&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= ファイルタイプをセット&lt;/span&gt;

    &lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="kp"&gt;private&lt;/span&gt;
    &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;user_params&lt;/span&gt;
      &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="nf"&gt;.require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= icon, icon_content_type を削除&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;フォームの変更&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;User#icon&lt;/code&gt; にファイルをアップロードできるように変更します．&lt;/p&gt;

&lt;p&gt;&lt;img alt="フォームの変更" src="/images/20131204_1.png" /&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_form&lt;/span&gt;&lt;span class="nf"&gt;.html.haml&lt;/span&gt;

&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.errors.any?&lt;/span&gt;
    &lt;span class="c1"&gt;#error_explanation&lt;/span&gt;
      &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;pluralize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.errors.count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; prohibited this user from being saved:&amp;quot;&lt;/span&gt;
      &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.errors.full_messages.each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

  &lt;span class="nf"&gt;.field&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.label&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.text_field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
  &lt;span class="nf"&gt;.field&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.label&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.file_field&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= text_field を file_field に変更&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="c1"&gt;# icon_content_type はフォームから削除しておく&lt;/span&gt;
  &lt;span class="nf"&gt;.actions&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="nf"&gt;.submit&lt;/span&gt; &lt;span class="s1"&gt;'Save'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ここまでで，保存ができるようになりましたが，index, show アクションで &lt;code&gt;User#icon&lt;/code&gt; がエラーになってしまいます．&lt;/p&gt;

&lt;h2&gt;保存した画像を表示できるようにする&lt;/h2&gt;

&lt;p&gt;解消するための下準備として，画像を表示できるようにします．&lt;/p&gt;

&lt;p&gt;画像専用のルーティングを定義します．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="nf"&gt;.rb&lt;/span&gt;

&lt;span class="no"&gt;SampleApp&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;&lt;span class="nf"&gt;.routes.draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= 追加&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;rake routes
   Prefix Verb   URI Pattern               Controller#Action
icon_user GET    /users/:id/icon&lt;span class="o"&gt;(&lt;/span&gt;.:format&lt;span class="o"&gt;)&lt;/span&gt; users#icon
...
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;icon_user_path&lt;/code&gt; が定義されました．&lt;/p&gt;

&lt;p&gt;コントローラに &lt;code&gt;icon&lt;/code&gt; アクションを追加し，&lt;code&gt;send_data&lt;/code&gt; メソッドにより画像を取得します．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;users_controller&lt;/span&gt;&lt;span class="nf"&gt;.rb&lt;/span&gt;

&lt;span class="k"&gt;class &lt;/span&gt;&lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:set_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;= scaffold の場合はここに :icon を追加すると楽&lt;/span&gt;

  &lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="k"&gt;def &lt;/span&gt;&lt;span class="nf"&gt;icon&lt;/span&gt;
    &lt;span class="n"&gt;send_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="nf"&gt;.icon_content_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;disposition: :inline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="nf"&gt;..&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;これで，&lt;code&gt;/users/:id/icon&lt;/code&gt; で画像が表示できるようになりました．&lt;/p&gt;

&lt;h2&gt;ビューの変更&lt;/h2&gt;

&lt;p&gt;最後に，index, show のビューを，&lt;code&gt;/users/:id/icon&lt;/code&gt; の画像を使用するように変更します．&lt;/p&gt;

&lt;p&gt;それぞれの &lt;code&gt;icon&lt;/code&gt; の表示部分を以下のように変更します．&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;image_tag&lt;/span&gt; &lt;span class="n"&gt;icon_user_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img alt="ビューの変更" src="/images/20131204_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;これで完了です．&lt;/p&gt;
</content>
  </entry>
</feed>
